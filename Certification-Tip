#Create an NGINX Pod
kubectl run nginx --image=nginx

#Generate POD Manifest YAML file (-o yaml). Don’t create it(–dry-run)
kubectl run nginx --image=nginx --dry-run=client -o yaml

kubectl run redis --image=redis:alpine --labels="tier=db"
kubectl run custom-nginx --image=nginx --port=8080
kubectl create namespace dev-ns


#Create a deployment
kubectl create deployment --image=nginx nginx
kubectl create deployment redis-deploy --namespace=dev-ns --replicas=2 --image=redis --dry-run=client


#Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run)
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

#Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.
kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

#In k8s version 1.19+, we can specify the –replicas option to create a deployment with 4 replicas.
kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deploy.yaml

# kubectl edit rs <rs name>  --->  will open the current running config file of the rs
# kubectl scale rs <rs name> --replicas=1 --> will delete/create the rs to match the count mentioned

# kubectl set image rs <rs name> nginx-container nginx=nginx:1.26-perl

#kubectl create svc clusterip newservice --clusterip="None" --dry-run=client -o yaml

Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
(This will automatically use the pod’s labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml 
(This will not use the pods labels as selectors, instead, it will assume selectors as app=redis.

You cannot pass in selectors as an option.

So, it does not work very well if your pod has a different label set. So, generate the file and modify the 
selectors before creating the service)

Create a Service named nginx of type NodePort to expose pod nginx’s port 80 on port 30080 on the nodes:

kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml
(This will automatically use the pod’s labels as selectors, but you cannot specify the node port. You have 
to generate a definition file and then add the node port manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml
(This will not use the pod labels as selectors.)

Both the above commands have their own challenges. While one of them cannot accept a selector, the other 
cannot accept a node port. I would recommend going with the

kubectl expose
command. If you need to specify a node port, generate a definition file using the same command and manually 
input the nodeport before creating the service.

Q:Create a pod called httpd using the image httpd:alpine in the default namespace. Next, create a service of type ClusterIP 
by the same name (httpd). The target port for the service should be 80
soln
kubectl run httpd --image=httpd:alpine --port=80 --expose
output
controlplane ~ ➜  kubectl run httpd --image=httpd:alpine --port=80 --expose --dry-run=client
service/httpd created (dry run)
pod/httpd created (dry run)
